/*
 * CodeCharacter API
 *
 * Specification of the CodeCharacter API
 *
 * The version of the OpenAPI document: 2022.0.1
 * Contact: delta@nitt.edu
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace CodeCharacter.CoreLibrary.Models;

/// <summary>
///     User stats model
/// </summary>
[DataContract]
public class UserStatsDto : IEquatable<UserStatsDto>
{
    /// <summary>
    ///     Gets or Sets CurrentLevel
    /// </summary>
    [Required]
    [DataMember(Name = "currentLevel", EmitDefaultValue = false)]
    public int CurrentLevel { get; set; }

    /// <summary>
    ///     Gets or Sets Rating
    /// </summary>
    [Required]
    [DataMember(Name = "rating", EmitDefaultValue = false)]
    public decimal Rating { get; set; }

    /// <summary>
    ///     Gets or Sets Wins
    /// </summary>
    [Required]
    [DataMember(Name = "wins", EmitDefaultValue = false)]
    public int Wins { get; set; }

    /// <summary>
    ///     Gets or Sets Losses
    /// </summary>
    [Required]
    [DataMember(Name = "losses", EmitDefaultValue = false)]
    public int Losses { get; set; }

    /// <summary>
    ///     Gets or Sets Ties
    /// </summary>
    [Required]
    [DataMember(Name = "ties", EmitDefaultValue = false)]
    public int Ties { get; set; }

    /// <summary>
    ///     Returns true if UserStatsDto instances are equal
    /// </summary>
    /// <param name="other">Instance of UserStatsDto to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(UserStatsDto other)
    {
        if (other is null) return false;
        if (ReferenceEquals(this, other)) return true;

        return
            (
                CurrentLevel == other.CurrentLevel ||
                CurrentLevel.Equals(other.CurrentLevel)
            ) &&
            (
                Rating == other.Rating ||
                Rating.Equals(other.Rating)
            ) &&
            (
                Wins == other.Wins ||
                Wins.Equals(other.Wins)
            ) &&
            (
                Losses == other.Losses ||
                Losses.Equals(other.Losses)
            ) &&
            (
                Ties == other.Ties ||
                Ties.Equals(other.Ties)
            );
    }

    /// <summary>
    ///     Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
        var sb = new StringBuilder();
        sb.Append("class UserStatsDto {\n");
        sb.Append("  CurrentLevel: ").Append(CurrentLevel).Append("\n");
        sb.Append("  Rating: ").Append(Rating).Append("\n");
        sb.Append("  Wins: ").Append(Wins).Append("\n");
        sb.Append("  Losses: ").Append(Losses).Append("\n");
        sb.Append("  Ties: ").Append(Ties).Append("\n");
        sb.Append("}\n");
        return sb.ToString();
    }

    /// <summary>
    ///     Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
        return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///     Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
        if (obj is null) return false;
        if (ReferenceEquals(this, obj)) return true;
        return obj.GetType() == GetType() && Equals((UserStatsDto)obj);
    }

    /// <summary>
    ///     Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
        unchecked // Overflow is fine, just wrap
        {
            var hashCode = 41;
            // Suitable nullity checks etc, of course :)

            hashCode = hashCode * 59 + CurrentLevel.GetHashCode();

            hashCode = hashCode * 59 + Rating.GetHashCode();

            hashCode = hashCode * 59 + Wins.GetHashCode();

            hashCode = hashCode * 59 + Losses.GetHashCode();

            hashCode = hashCode * 59 + Ties.GetHashCode();
            return hashCode;
        }
    }

    #region Operators

#pragma warning disable 1591

    public static bool operator ==(UserStatsDto left, UserStatsDto right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(UserStatsDto left, UserStatsDto right)
    {
        return !Equals(left, right);
    }

#pragma warning restore 1591

    #endregion Operators
}