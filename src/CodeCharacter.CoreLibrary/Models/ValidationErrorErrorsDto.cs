/*
 * CodeCharacter API
 *
 * Specification of the CodeCharacter API
 *
 * The version of the OpenAPI document: 2022.0.1
 * Contact: delta@nitt.edu
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace CodeCharacter.CoreLibrary.Models
{
    /// <summary>
    /// </summary>
    [DataContract]
    public class ValidationErrorErrorsDto : IEquatable<ValidationErrorErrorsDto>
    {
        /// <summary>
        ///     Gets or Sets Field
        /// </summary>
        [DataMember(Name = "field", EmitDefaultValue = false)]
        public string Field { get; set; }

        /// <summary>
        ///     Returns true if ValidationErrorErrorsDto instances are equal
        /// </summary>
        /// <param name="other">Instance of ValidationErrorErrorsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationErrorErrorsDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                Field == other.Field ||
                Field != null &&
                Field.Equals(other.Field);
        }

        /// <summary>
        ///     Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidationErrorErrorsDto {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        ///     Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        ///     Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ValidationErrorErrorsDto) obj);
        }

        /// <summary>
        ///     Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Field != null)
                    hashCode = hashCode * 59 + Field.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(ValidationErrorErrorsDto left, ValidationErrorErrorsDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ValidationErrorErrorsDto left, ValidationErrorErrorsDto right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}